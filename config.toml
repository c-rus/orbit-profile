[[template]]
alias = "std"
summary = "basic project structure with rtl/ and sim/"
path = "template/"
ignore = [
    "extra/"
]


[[plugin]]
alias = "quartus"
summary = "Complete toolflow for Intel Quartus Prime backend program"
command = "python"
args = ["./plugin/quartus.py"]
fileset.pin-plan = "*.board"
fileset.bdf-file = "*.bdf"
details = """
Toolflow actions will perform necessary preceding steps (synth, route, 
bitstream, sta). Options are extra arguments available alongside toolflows. 
Environment variables are optionally set key/value pairs under [env] in Orbit's
config.toml.

Usage:
    orbit build --plugin quartus -- [options]
    
Options:
    --synth         perform analysis and elaboration
    --route         fit the design to the board and assign pins
    --bit           generate a bitstream file for programming to FPGA
    --sta           run a static timing analysis
    --eda-netlist   use MAXII device for .sdo and .vho files in timing sim
    --compile       run through entire flow
    --open          create the project and open it in quartus GUI
    --pgm-soft      upload .sof file to connected FPGA (SRAM Object Files)
    --pgm-hard      upload .pof file to connected FPGA (Programmer Object Files)
    --include-sim   include the project's top-level simulation files

Environment:
    ORBIT_ENV_QUARTUS_PATH    filesystem path to Quartus binaries

Dependencies:
    Intel Quartus Prime Lite (tested: 19.1)
    Python (tested: 3.8.6)
"""


[[plugin]]
alias   = "ghdl"
summary = "Backend script for simulating VHDL with GHDL"
command = "python"
args    = ["./plugin/ghdl.py"]
fileset.py-model = "{{orbit.bench}}.py"
details = """
Analyzes and simulates a testbench with GHDL. If a vcd viewer program is 
specified with the corresponding environment variable and --view is used, then 
the vcd file will be the first argument to the command.

Generics set on the command-line with '--generic' are synchronized with the ghdl
simulation and the Python software model script. Generics are entered in the
Python model script as command-line arguments in the format '-g=<key>=<value>'.

Usage:
    orbit build --plugin ghdl -- [options]

Options:
    --view                          open the vcd file in a vcd viewer
    --generic, -g <name>=<value>    override a testbench generic

Environment:
    ORBIT_ENV_GHDL_PATH         path to invoke GHDL binary
    ORBIT_ENV_VCD_VIEWER        path to invoke a VCD program

Dependencies:
    GHDL (tested: 3.0.0-dev (2.0.0.r101.g791ff0c1) [Dunoon edition])
    Python (tested: 3.8.6)
"""

[[plugin]]
alias = "msim"
summary = "Backend script for simulating HDL with ModelSim"
command = "python"
args    = ["./plugin/modelsim.py"]
fileset.py-model = "{{orbit.bench}}.py"
fileset.do-file = "{{orbit.bench}}.do"
details = """
Compiles HDL files and runs a simulation in batch mode through ModelSim Altera.

Generics set on the command-line with '--generic' are synchronized with the
ModelSim simulation and the Python software model script. Generics are entered 
in the Python model script as command-line arguments in the format 
'-g=<key>=<value>'.

Usage:
    orbit build --plugin msim -- [options]

Options:
    --gui                           prepare the simulation for gui
    --review                        open an already existing waveform result 
    --init                          prepare the simulation for run
    --lint                          only perform static code analysis  
    --clean                         clear existing output directory
    --generic, -g <name>=<value>    override a testbench generic

Environment:
    ORBIT_ENV_MODELSIM_PATH     path to invoke msim binaries (vcom, vsim, ...)

Dependencies:
    ModelSim ALTERA STARTER EDITION (tested: 10.5b 2016.10 Oct 5 2016)
    Python (tested: 3.9.7)
"""


[[plugin]]
alias   = "viv-no-xpr"
summary = "Backend Vivado non-project mode toolflow"
command = "vivado"
args    = ["-mode", "batch", "-nojournal", "-nolog", "-source", "./plugin/viv-no-xpr.tcl", "-tclargs"]
fileset.xil-xdc = "*.xdc"
details = """
Provides entire basic toolchain for Xilinx Vivado: synthesis, implementation,
and generating bitstream. The default process is to only perform synthesis on
the targeted top-level. Any process chosen will also execute the processes 
required before it (synth -> impl -> route -> bit).

If '--pgm' is supplied with no toolchain process, it will attempt to only 
program a connected device with an already existing bitfile named after the
toplevel $ORBIT_TOP. Otherwise, to generate a fresh bitfile and then program the
device, also supply the '--bit' option.

If '--synth' or a toolchain process is supplied, then '--part <num>' must be 
specified as well because there is no set default part number. Top-level 
generics can be overridden during synthesis by using the '--generic' option.
Unknown generics are ignored by the synthesis tool.

Assumes Vivado is already added to the PATH environment variable.

Usage:
    orbit build --plugin viv-no-xpr -- [options]

Options:
    --part <num>                    specify target xilinx device 
    --synth                         analyze & synthesize
    --impl                          implementation & optimization
    --route                         route design
    --bit                           generate a bitstream
    --pgm                           program a connected FPGA device
    --clean                         clear existing output directory
-g, --generic <name>=<value>...     override top-level generics/parameters

Dependencies:
    Vivado (tested: 2019.2)

Examples:
    orbit build --plugin viv-no-xpr -- --clean --synth --part xc7z010
    orbit build --plugin viv-no-xpr -- --bit --pgm --part xc7z020
"""

[[plugin]]
alias = "viv-xpr"
summary = "Backend Vivado project mode toolflow"
command = "vivado"
args = ["-mode", "batch", "-nojournal", "-nolog", "-source", "./plugin/viv-xpr.tcl", "-tclargs"]
fileset.xil-xdc = "*.xdc"
fileset.py-model = "{{orbit.bench}}.py"
details = """
By default, creates a Vivado project and opens it in the Vivado gui.

To ensure data files are imported to the simulation fileset after being 
generated by the Python software model PY-MODEL, generate files with '.dat'
file extension.

Usage:
    orbit build --plugin viv-xpr -- [options]

Options:
    --part <num>                specify target xilinx device
    --clean                     clear existing output directory

Dependencies:
    Vivado (tested: 2019.2)
"""

[[plugin]]
alias = "zipr"
summary = "Compress files into a submission-like format"
command = "python"
args = ["./plugin/zipr.py"]
fileset.zip-list = "submission.txt"
details = """
By default, collects files listed in ZIP-LIST file and zips them into a
compressed file, preserving relative paths to the current ip.

The file format for ZIP-LIST consists of a relative path on its own line to
search for. Lines beginning with semicolons ';' and empty lines are ignored.

Usage:
    orbit build --plugin zipr -- [options]

Options:
    --output, -o            compressed output filename
    --flat                  flatten the directory tree to include no folders
    --force                 compress files regardless of missing finds

Dependencies:
    Python (tested: 3.9.7)
"""